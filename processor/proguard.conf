-printmapping out.map
-dontwarn spp.processor.**
-dontobfuscate

-keep class spp.processor.live.** { *; }
-keep class spp.processor.logging.** { *; }
-keep class spp.processor.tracing.** { *; }

-keep @spp.processor.common.io.vertx.codegen.annotations.VertxGen public class * { *; }

-keep public class spp.processor.**.*EBProxy { *; }
-keep public class spp.processor.**.*ProxyHandler { *; }
-keep public class spp.processor.**.*ProcessorProvider { *; }
-keep public class spp.processor.**.*Module { *; }

-keepclasseswithmembers class spp.processor.common.io.netty.** {
    *;
}
-keepnames class spp.processor.common.io.netty.** {
    *;
}

-keepnames class spp.processor.common.org.apache.logging.** {
    *;
}

-keepnames class spp.processor.common.org.slf4j.** {
    *;
}

-keepnames class spp.processor.common.io.vertx.core.spi.VertxFactory
-keepnames class spp.processor.common.io.vertx.core.spi.BufferFactory
-keepnames class spp.processor.common.io.vertx.core.spi.FutureFactory
-keepnames class spp.processor.common.org.slf4j.impl.StaticMDCBinder

-keep class spp.processor.common.io.vertx.core.http.impl.* {
	*;
}

-keep class spp.processor.common.io.vertx.codegen.annotations.* {
    *;
}

-keep class spp.processor.common.io.netty.channel.* {
	*;
}
-keepclasseswithmembers class spp.processor.common.io.netty.channel.* {
   *;
}

-renamesourcefileattribute SourceFile
-keepattributes Signature,Exceptions,*Annotation*,
                InnerClasses,PermittedSubclasses,EnclosingMethod,
                Deprecated,SourceFile,LineNumberTable

-keepclasseswithmembernames,includedescriptorclasses class * {
    native <methods>;
}

-keepclassmembers,allowoptimization enum * {
    public static **[] values();
    public static ** valueOf(java.lang.String);
}

-keepclassmembers class * implements java.io.Serializable {
    static final long serialVersionUID;
    private static final java.io.ObjectStreamField[] serialPersistentFields;
    !static !transient <fields>;
    !private <fields>;
    !private <methods>;
    private void writeObject(java.io.ObjectOutputStream);
    private void readObject(java.io.ObjectInputStream);
    java.lang.Object writeReplace();
    java.lang.Object readResolve();
}

-keep class com.sourceplusplus.protocol.** { *; }

-keepnames class spp.processor.common.kotlinx.** { *; }

# ServiceLoader support
-keepnames class spp.processor.common.kotlinx.coroutines.internal.MainDispatcherFactory {}
-keepnames class spp.processor.common.kotlinx.coroutines.CoroutineExceptionHandler {}

# Most of volatile fields are updated with AFU and should not be mangled
-keepclassmembernames class spp.processor.common.kotlinx.** {
    volatile <fields>;
}

# Same story for the standard library's SafeContinuation that also uses AtomicReferenceFieldUpdater
-keepclassmembernames class spp.processor.common.kotlin.coroutines.SafeContinuation {
    volatile <fields>;
}

# These classes are only required by kotlinx.coroutines.debug.AgentPremain, which is only loaded when
# kotlinx-coroutines-core is used as a Java agent, so these are not needed in contexts where ProGuard is used.
-dontwarn java.lang.instrument.ClassFileTransformer
-dontwarn sun.misc.SignalHandler
-dontwarn java.lang.instrument.Instrumentation
-dontwarn sun.misc.Signal