name: Debian Build

on:
  pull_request:
    paths-ignore:
      - '**.md'
      - '**.svg'
      - '.github/workflows/jvm-build.yml'
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - '**.svg'
      - '.github/workflows/jvm-build.yml'
  workflow_dispatch:

jobs:
  debian-build:
    if: ${{ !contains(github.event.pull_request.head.ref, '#docs') && !(startsWith(github.event.head_commit.message, 'Merge pull request') && contains(github.event.head_commit.message, '#docs')) }}

    runs-on: ubuntu-latest
    timeout-minutes: 45
    concurrency: 
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    outputs:
      version: ${{ steps.properties.outputs.version }}
    steps:
      - uses: docker-practice/actions-setup-docker@master
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          PROPERTIES="$(./gradlew properties --console=plain -q)"
          VERSION="$(echo "$PROPERTIES" | grep "^version:" | cut -f2- -d ' ')"
          echo "::set-output name=version::$VERSION"
          echo "SPP_PLATFORM_VERSION=$VERSION" >> $GITHUB_ENV
      - name: Build & start platform
        run: ./gradlew -p platform assemble nativeImage updateDockerFiles composeUp -Dbuild.profile=debian
      - name: Compress platform
        run: curl -O -J -L https://github.com/upx/upx/releases/download/v3.96/upx-3.96-amd64_linux.tar.xz && tar -xJf upx-3.96-amd64_linux.tar.xz && ./upx-3.96-amd64_linux/upx platform/core/build/graal/spp-platform
      - name: Docker IPs
        run: docker inspect --format='{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aq)
      - name: Set SPP_PLATFORM_HOST
        run: SPP_PLATFORM_HOST=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aqf "name=spp-platform")) && echo "SPP_PLATFORM_HOST=$SPP_PLATFORM_HOST" >> $GITHUB_ENV
      - name: Wait for platform
        run: until $(curl --insecure --output /dev/null --silent --fail https://${{ env.SPP_PLATFORM_HOST }}:5445/api/new-token?access_token=change-me); do printf '.'; sleep 5; done && SPP_JWT_TOKEN=$(curl --insecure https://${{ env.SPP_PLATFORM_HOST }}:5445/api/new-token?access_token=change-me) && echo "SPP_JWT_TOKEN=$SPP_JWT_TOKEN" >> $GITHUB_ENV
      - name: Wait for skywalking
        run: |
          until $(curl --header "Authorization: Bearer ${{ env.SPP_JWT_TOKEN }}" --insecure --output /dev/null --silent --fail https://${{ env.SPP_PLATFORM_HOST }}:5445/health); do printf '.'; sleep 5; done
      - run: sleep 30s

      - name: Run unit tests
        run: ./gradlew test

      - name: Run platform integration tests
        run: ./gradlew -p platform test -Dtest.profile=integration -Dbuild.profile=debian

      - run: ./gradlew :platform:composeLogs
        if: ${{ always() }}

      - name: Upload docker logs artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: docker-logs
          path: ./platform/build/containers-logs

      - name: Build release dist
        run: |
          mkdir -p dist/spp-platform-${{ env.SPP_PLATFORM_VERSION }}/config \
          && cp config/spp-platform.yml dist/spp-platform-${{ env.SPP_PLATFORM_VERSION }}/config \
          && cp platform/core/build/graal/spp-platform dist/spp-platform-${{ env.SPP_PLATFORM_VERSION }} \
          && (cd dist && tar -zcvf ../spp-platform-${{ env.SPP_PLATFORM_VERSION }}-linux-amd64.tar.gz *)

      - name: Upload spp-platform
        uses: actions/upload-artifact@v2
        with:
          name: spp-platform-${{ env.SPP_PLATFORM_VERSION }}-linux-amd64.tar.gz
          path: ./spp-platform-${{ env.SPP_PLATFORM_VERSION }}-linux-amd64.tar.gz

      - name: Zip S++ processors
        run: find docker/e2e -name 'spp-processor-*' | zip -j spp-processors.zip -@

      - name: Upload S++ processors
        uses: actions/upload-artifact@v2
        with:
          name: spp-processors.zip
          path: ./spp-processors.zip

  releaseDraft:
    name: Release Draft
    needs: [debian-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:

      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -H "Authorization: Bearer $GITHUB_TOKEN" https://api.github.com/repos/$GITHUB_REPOSITORY/releases \
            | tr '\r\n' ' ' \
            | jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' \
          curl -X DELETE -H "Authorization: Bearer $GITHUB_TOKEN" https://api.github.com/repos/$GITHUB_REPOSITORY/releases/{}

      - name: Create Release Draft
        id: createDraft
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.debian-build.outputs.version }}
          release_name: v${{ needs.debian-build.outputs.version }}
          body: ${{ needs.build.outputs.changelog }}
          draft: true

      - name: Download S++ processors artifact
        uses: actions/download-artifact@v2
        with:
          name: spp-processors.zip

      - name: Upload S++ processors asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.createDraft.outputs.upload_url }}
          asset_path: ./spp-processors.zip
          asset_name: spp-processors.zip
          asset_content_type: application/zip

      - name: Download spp-platform artifact (Linux)
        uses: actions/download-artifact@v2
        with:
          name: spp-platform-${{ needs.debian-build.outputs.version }}-linux-amd64.tar.gz

      - name: Upload spp-platform asset (Linux)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.createDraft.outputs.upload_url }}
          asset_path: ./spp-platform-${{ needs.debian-build.outputs.version }}-linux-amd64.tar.gz
          asset_name: spp-platform-${{ needs.debian-build.outputs.version }}-linux-amd64.tar.gz
          asset_content_type: application/gzip

  docker-push:
    needs: [debian-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Login to DockerHub Registry
        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Download spp-platform artifact (Linux)
        uses: actions/download-artifact@v2
        with:
          name: spp-platform-${{ needs.debian-build.outputs.version }}-linux-amd64.tar.gz
          path: ./docker/spp-platform

      - name: Untar spp-platform
        run: cd ./docker/spp-platform && tar -zxvf spp-platform-${{ needs.debian-build.outputs.version }}-linux-amd64.tar.gz --strip-components=1

      - name: Build spp-platform tagged Docker image
        run: cd ./docker/spp-platform && docker build . --file Dockerfile --tag sourceplusplus/spp-platform:${{ needs.debian-build.outputs.version }}

      - name: Retag spp-platform tagged Docker image to latest
        run: docker tag sourceplusplus/spp-platform:${{ needs.debian-build.outputs.version }} sourceplusplus/spp-platform:latest

      - name: Push spp-platform latest Docker image
        run: docker push sourceplusplus/spp-platform:latest

      - name: Download Source++ processors
        uses: actions/download-artifact@v2
        with:
          name: spp-processors.zip
          path: ./docker/spp-oap-server

      - name: Unzip Source++ processors
        run: cd ./docker/spp-oap-server && unzip spp-processors.zip

      - name: Build spp-oap-server tagged Docker image
        run: cd ./docker/spp-oap-server && docker build . --file Dockerfile --tag sourceplusplus/spp-oap-server:${{ needs.debian-build.outputs.version }}

      - name: Retag spp-oap-server tagged Docker image to latest
        run: docker tag sourceplusplus/spp-oap-server:${{ needs.debian-build.outputs.version }} sourceplusplus/spp-oap-server:latest

      - name: Push spp-oap-server latest Docker image
        run: docker push sourceplusplus/spp-oap-server:latest

  # Delete build artifacts
  cleanup:
    needs: [debian-build, releaseDraft, docker-push]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Delete spp-platform (Linux)
        uses: geekyeggo/delete-artifact@v1
        with:
          name: spp-platform-${{ needs.debian-build.outputs.version }}-linux-amd64.tar.gz

      - name: Delete Source++ processors
        uses: geekyeggo/delete-artifact@v1
        with:
          name: spp-processors.zip
